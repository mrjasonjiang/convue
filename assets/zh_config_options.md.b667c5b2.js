import{o as n,c as s,a}from"./app.d4385936.js";const t='{"title":"Options","description":"","frontmatter":{},"relativePath":"zh/config/options.md","lastUpdated":1613800069437}',p={},o=a('<h1 id="options"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h1><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ImportMode</span> <span class="token operator">=</span> <span class="token string">&#39;sync&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;async&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ImportModeResolveFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>filepath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ImportMode<span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">HistoryMode</span> <span class="token operator">=</span> <span class="token string">&#39;hash&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>\n  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  props<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  component<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  children<span class="token operator">?</span><span class="token operator">:</span> Route<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  meta<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RouterConfig</span> <span class="token punctuation">{</span>\n  history<span class="token operator">?</span><span class="token operator">:</span> HistoryMode<span class="token punctuation">;</span>\n  scrollBehavior<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Progress</span> <span class="token punctuation">{</span>\n  color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  size<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * Plugin options.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>\n  head<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    meta<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    link<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  loading<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  progress<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> Progress<span class="token punctuation">;</span>\n  page<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for page components.\n     * @default &#39;src/pages&#39;\n     */</span>\n    dir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for middleware.\n     * @default &#39;src/middleware&#39;\n     */</span>\n    middleware<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * router config\n     */</span>\n    router<span class="token operator">?</span><span class="token operator">:</span> RouterConfig<span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Valid file extensions for page components.\n     * @default [&#39;vue&#39;, &#39;js&#39;, &#39;ts&#39;, &#39;jsx&#39;, &#39;tsx&#39;]\n     */</span>\n    extensions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * List of path globs to exclude when resolving pages.\n     */</span>\n    exclude<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Import routes directly or as async components\n     * @default &#39;async&#39;\n     */</span>\n    importMode<span class="token operator">?</span><span class="token operator">:</span> ImportMode <span class="token operator">|</span> ImportModeResolveFn<span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Sync load top level index file\n     * @default true\n     */</span>\n    syncIndex<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Set default route block parser, or use `&lt;route lang=xxx&gt;` in SFC route block\n     * @default &#39;yaml&#39;\n     */</span>\n    routeBlockLang<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;json5&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;json&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;yaml&#39;</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Extend route records\n     */</span>\n    extendRoute<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>route<span class="token operator">:</span> Route<span class="token punctuation">,</span> parent<span class="token operator">:</span> Route <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Route <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  store<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for store.\n     * @default &#39;src/store&#39;\n     */</span>\n    dir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Valid file extensions for store.\n     * @default [&#39;js&#39;, &#39;ts&#39;]\n     */</span>\n    extensions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * List of path globs to exclude when resolving pages.\n     */</span>\n    exclude<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  layout<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for page components.\n     * @default &#39;src/layouts&#39;\n     */</span>\n    dir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * Valid file extensions for page components.\n     * @default [&#39;vue&#39;, &#39;js&#39;, &#39;ts&#39;, &#39;jsx&#39;, &#39;tsx&#39;]\n     */</span>\n    extensions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * List of path globs to exclude when resolving pages.\n     */</span>\n    exclude<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  component<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for global components.\n     * @default &#39;src/components&#39;\n     */</span>\n    dir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Valid file extensions for global components.\n     * @default [&#39;vue&#39;, &#39;js&#39;, &#39;ts&#39;, &#39;jsx&#39;, &#39;tsx&#39;]\n     */</span>\n    extensions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * List of path globs to exclude when resolving pages.\n     */</span>\n    exclude<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  plugin<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for plugins.\n     * @default &#39;src/plugins&#39;\n     */</span>\n    dir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Valid file extensions for plugin.\n     * @default [&#39;js&#39;, &#39;ts&#39;]\n     */</span>\n    extensions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * List of path globs to exclude when resolving pages.\n     */</span>\n    exclude<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  locale<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Relative path to the directory to search for locales.\n     * @default &#39;src/locales&#39;\n     */</span>\n    dir<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    defaultLocale<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * Valid file extensions for locale.\n     * @default [&#39;js&#39;, &#39;ts&#39;]\n     */</span>\n    extensions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/**\n     * List of path globs to exclude when resolving pages.\n     */</span>\n    exclude<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',2);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
